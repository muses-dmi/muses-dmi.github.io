<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Muses - Digital Musical Instruments on Muses</title>
    <link>/</link>
    <description>Recent content in Muses - Digital Musical Instruments on Muses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 May 2019 13:29:41 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>benchmarking_database_there_and_back_again</title>
      <link>/benchmarking/benchmarking_database_there_and_back_again/</link>
      <pubDate>Mon, 20 Apr 2020 08:16:30 +0100</pubDate>
      
      <guid>/benchmarking/benchmarking_database_there_and_back_again/</guid>
      <description>Benchmarking Methodology (Explain method.)
Warmup run.
Being one of the most influencial controllable parameters, the buffer size is scaled in the tests and the performance measured. The buffer size was scaled by powers of two, starting at a buffer size of one, up to a size of 32768. This is an exponential increase which does avoid detailed measurements at larger buffer sizes as the steps are bigger. However, this was chosen as it gives fine detailed measurmeents at smaller buffer sizes which are of particular interest to people working in real-time digital audio, whilst also covering the larger buffer sizes to demonstrate real-time issues and offline capabilities.</description>
    </item>
    
    <item>
      <title>PM_GPUs</title>
      <link>/pm_gpus/overview/</link>
      <pubDate>Wed, 20 Nov 2019 08:16:30 +0100</pubDate>
      
      <guid>/pm_gpus/overview/</guid>
      <description>Numerical Methods for Physical Modelling and GPUs Direct numerical methods which have long been studied and applied in physics and mathematics are powerful schemes used to simulate physical phenomena. By simulating the physics of sound wave propagation through instruments and environments, new synthesizers and effects can be accuratly modelled. Physical modelling was for a long time impracticle to compute for most applications. With the level of computational power available today, they are becoming more viable.</description>
    </item>
    
    <item>
      <title>benchmarking</title>
      <link>/benchmarking/overview/</link>
      <pubDate>Wed, 20 Nov 2019 08:16:30 +0100</pubDate>
      
      <guid>/benchmarking/overview/</guid>
      <description>Benchmarking For justification purposes, performance profiling and benchmarking suites have been developed around the design and research of accelerating DSP processes like audio synthesis. Full databases of results and discussions are collected in this project.
Benchmarking Database - There and Back Again:The Practicality of GPU Accelerated Digital Audio For the paper published in NIME 2020, a database of benchmarking results were collected and discussed. All the results could not be covered in the limits of the conference paper, so the database of results can be found here along with further discussion.</description>
    </item>
    
    <item>
      <title>gpu_accelerated_2d_physical_model</title>
      <link>/pm_gpus/gpu_accelerated_2d_physical_model/</link>
      <pubDate>Wed, 20 Nov 2019 08:16:30 +0100</pubDate>
      
      <guid>/pm_gpus/gpu_accelerated_2d_physical_model/</guid>
      <description>GPU-Accelerated Physical Model For Real-time Drumhead Synthesis This post covers the highlights of the code base used to present the GPU-accelerated drumhead physical model program. This application was demonstrated at the Audio Developers Conference 2019 and the conference of New Instruments for Musical Expression (NIME 2020). The application presents a model of a 2D drumhead physical model based on direct numerical methods from mathematical simulations. Specifically, the model uses finite differencing methods based within the time-domain.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>/pat/listen/</link>
      <pubDate>Fri, 09 Aug 2019 16:42:08 +0100</pubDate>
      
      <guid>/pat/listen/</guid>
      <description> Audio Examples Perhaps the best way to get familiar with Pat is to take a listen.
We can listen to an example of Pat directly converted to audio in this example:
 To help get a feel for what is happening, we can listen to this pattern looped, with some percussion used to ground where the sequence synchronizes.
 </description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>/pat/synth/</link>
      <pubDate>Fri, 09 Aug 2019 16:42:08 +0100</pubDate>
      
      <guid>/pat/synth/</guid>
      <description> Muses Audio Platform We expose a method for configuring the step sequencer found in the Muses Audio Platform using Pat.
In this screen grab of the application, we can see the following pat expression has been used to layout the step sequencer:
y y y y r y | : | r y y y | : | r y y y o y o  </description>
    </item>
    
    <item>
      <title>Pat</title>
      <link>/pat/overview/</link>
      <pubDate>Thu, 06 Jun 2019 08:16:30 +0100</pubDate>
      
      <guid>/pat/overview/</guid>
      <description>Overview Pat is a miniature domain specific programming language (DSL) which is heavily influenced by Tidal Cycles. This language was implemented as a means to explore an abstract representation of sequences of musical events for digital musical instruments.
We have used Pat to illustrate a number of perspectives on this and will continue to use it in future work.
Applications - Audio Examples We can listen to an example of Pat directly converted to audio in here and get an idea of how Pat is used.</description>
    </item>
    
    <item>
      <title>SVG Interfaces</title>
      <link>/svg_interfaces/overview/</link>
      <pubDate>Sat, 11 May 2019 08:16:30 +0100</pubDate>
      
      <guid>/svg_interfaces/overview/</guid>
      <description>Overview SVG Interfaces is an on going project exploring the design and implementation of custom controller interfaces, bridging the issue of user mapping between action and sound in interactive music systems. We have developed a simple framework utilizing functional specifications for musical interfaces and their mappings. The system is based on a subset of Scalable Vector Graphics (SVG); interfaces are described using a simple Haskell based &amp;lsquo;controller DSL&amp;rsquo; or equally using a vector drawing application (i.</description>
    </item>
    
    <item>
      <title>research papers</title>
      <link>/papers/</link>
      <pubDate>Fri, 10 May 2019 15:07:52 +0100</pubDate>
      
      <guid>/papers/</guid>
      <description>Renney, Harri., Gaster, Benedict. R. and Mitchell, Tom. (2020) There and Back Again: The Practicality of GPU Accelerated Digital Audio. To appear in NIME&amp;rsquo;20: Proceedings of the 20th New Interfaces for Musical Expression, June 2020.
Paper
Benedict R. Gaster and Carinna Parraman. (2019) Printing the Muses: Reimaging digital musical instruments through 2.5D printing. In: Proceedings of the IS&amp;amp;T Printing for Fabrication, 2019.
Paper Poster
Nathan Renney and Benedict R. Gaster. (2019) Digital Expression and Representation of Rhythm.</description>
    </item>
    
    <item>
      <title>Contributors</title>
      <link>/contributors/</link>
      <pubDate>Fri, 10 May 2019 13:29:41 +0100</pubDate>
      
      <guid>/contributors/</guid>
      <description>Muses is under active development by Benedict R. Gaster and Nathan Renney, along with contributions from Carinna Parraman and others.</description>
    </item>
    
    <item>
      <title>Muses - Digital Musical Instruments</title>
      <link>/posts/hello/</link>
      <pubDate>Fri, 10 May 2019 13:29:41 +0100</pubDate>
      
      <guid>/posts/hello/</guid>
      <description>Muses is an umbrella project for work being done in the Physical Computing Group at University of West of England (UWE). Our particular focus is applying programming language theory and practice, physical computing, networking, and musicial theory to design and implementation of Digitial Musical Instruments (DMI).</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Fri, 10 May 2019 13:29:41 +0100</pubDate>
      
      <guid>/projects/</guid>
      <description>SVG Interfaces SVG Interfaces is an on going project exploring the design and implementation of custom controller interfaces, bridging the issue of user mapping between action and sound in interactive music systems.
More information can be found here.
Pat - DSL for exploring Polyrhythm and Polymeter Music provides a means to explore time by sequencing musical events in a seemingly endless and expressive way. Pat is a project that takes inspiration from Tidal Cycles and provides a means to explore advanced rhythmic concepts like polyrhythm and polymeter within the context of designing digital musical instruments.</description>
    </item>
    
  </channel>
</rss>